const { Pool } = require('pg');
const { query, closePool } = require('../database/connection');
const { hashPassword } = require('../utils/encryption');

// Test database configuration
const testDbConfig = {
  connectionString: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL,
  ssl: false,
  max: 5,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
};

let testPool;

// Setup test database
const setupTestDB = async () => {
  testPool = new Pool(testDbConfig);
  
  // Create test database if it doesn't exist
  const adminPool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: false
  });

  try {
    await adminPool.query('CREATE DATABASE fiddy_autopublisher_test');
  } catch (error) {
    // Database might already exist, ignore error
    if (!error.message.includes('already exists')) {
      throw error;
    }
  } finally {
    await adminPool.end();
  }

  return testPool;
};

// Clean up test database
const cleanupTestDB = async () => {
  if (testPool) {
    await testPool.end();
  }
};

// Create test user
const createTestUser = async (userData = {}) => {
  const defaultUser = {
    email: 'test@example.com',
    password: 'password123',
    firstName: 'Test',
    lastName: 'User',
    subscriptionTier: 'trial'
  };

  const user = { ...defaultUser, ...userData };
  const passwordHash = await hashPassword(user.password);

  const result = await testPool.query(
    `INSERT INTO users (email, password_hash, first_name, last_name, subscription_tier)
     VALUES ($1, $2, $3, $4, $5)
     RETURNING id, email, first_name, last_name, subscription_tier`,
    [user.email, passwordHash, user.firstName, user.lastName, user.subscriptionTier]
  );

  return {
    ...result.rows[0],
    password: user.password
  };
};

// Create test campaign
const createTestCampaign = async (userId, campaignData = {}) => {
  const defaultCampaign = {
    topic: 'Test Topic',
    context: 'This is a test campaign context for testing purposes.',
    toneOfVoice: 'conversational',
    writingStyle: 'pas',
    schedule: '24h'
  };

  const campaign = { ...defaultCampaign, ...campaignData };

  const result = await testPool.query(
    `INSERT INTO campaigns (user_id, topic, context, tone_of_voice, writing_style, schedule)
     VALUES ($1, $2, $3, $4, $5, $6)
     RETURNING *`,
    [userId, campaign.topic, campaign.context, campaign.toneOfVoice, campaign.writingStyle, campaign.schedule]
  );

  return result.rows[0];
};

// Create test WordPress site
const createTestWordPressSite = async (userId, siteData = {}) => {
  const defaultSite = {
    siteName: 'Test Site',
    siteUrl: 'https://testsite.com',
    username: 'testuser',
    password: 'testpass'
  };

  const site = { ...defaultSite, ...siteData };

  const result = await testPool.query(
    `INSERT INTO wordpress_sites (user_id, site_name, site_url, username, password_encrypted, api_endpoint)
     VALUES ($1, $2, $3, $4, $5, $6)
     RETURNING *`,
    [userId, site.siteName, site.siteUrl, site.username, site.password, `${site.siteUrl}/wp-json/wp/v2`]
  );

  return result.rows[0];
};

// Create test license key
const createTestLicenseKey = async (licenseData = {}) => {
  const defaultLicense = {
    licenseKey: 'TEST-1234-ABCD-5678',
    subscriptionTier: 'hobbyist',
    postsPerMonth: 25,
    maxCampaigns: 1,
    supportTier: 'basic'
  };

  const license = { ...defaultLicense, ...licenseData };

  const result = await testPool.query(
    `INSERT INTO license_keys (license_key, subscription_tier, posts_per_month, max_campaigns, support_tier)
     VALUES ($1, $2, $3, $4, $5)
     RETURNING *`,
    [license.licenseKey, license.subscriptionTier, license.postsPerMonth, license.maxCampaigns, license.supportTier]
  );

  return result.rows[0];
};

// Clean up test data
const cleanupTestData = async () => {
  await testPool.query('DELETE FROM logs');
  await testPool.query('DELETE FROM content_queue');
  await testPool.query('DELETE FROM campaigns');
  await testPool.query('DELETE FROM wordpress_sites');
  await testPool.query('DELETE FROM license_keys');
  await testPool.query('DELETE FROM users');
};

// Mock OpenAI responses
const mockOpenAIResponse = {
  choices: [{
    message: {
      content: '<h1>Test Blog Post</h1><p>This is a test blog post generated by AI for testing purposes.</p>'
    }
  }]
};

const mockDALLEResponse = {
  data: [{
    url: 'https://example.com/test-image.jpg'
  }]
};

module.exports = {
  setupTestDB,
  cleanupTestDB,
  createTestUser,
  createTestCampaign,
  createTestWordPressSite,
  createTestLicenseKey,
  cleanupTestData,
  mockOpenAIResponse,
  mockDALLEResponse,
  testPool
};

